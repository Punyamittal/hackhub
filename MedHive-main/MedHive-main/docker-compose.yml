version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      - db
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=HachathonHub
      - GROQ_API_KEY=${GROQ_API_KEY}
      - ASTRA_DB_ID=${ASTRA_DB_ID}
      - ASTRA_DB_REGION=${ASTRA_DB_REGION}
      - ASTRA_DB_APPLICATION_TOKEN=${ASTRA_DB_APPLICATION_TOKEN}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=HachathonHub
    ports:
      - "5432:5432"

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.8.0
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlflow
    command: mlflow server --host 0.0.0.0 --backend-store-uri postgresql://postgres:postgres@db/mlflow

  federated-server:
    build:
      context: ./federated_learning
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - backend
      - db
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=HachathonHub
      - MLFLOW_TRACKING_URI=http://mlflow:5000

volumes:
  postgres_data:
  mlflow_data: 